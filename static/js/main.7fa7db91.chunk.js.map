{"version":3,"sources":["App.js","index.js"],"names":["client","create","contractInfo","abi","metadataFile","address","provider","ethers","providers","Web3Provider","window","ethereum","contract","Contract","App","on","newNetwork","oldNetwork","location","reload","useState","currentAccount","setCurrentAccount","cid","setCid","json","setJson","switchNetworkMumbai","a","request","method","params","chainId","code","chainName","rpcUrls","nativeCurrency","name","symbol","decimals","blockExplorerUrls","alert","message","connectWalletHandler","accounts","mint","add","added","signerContract","connect","getSigner","mint_single","path","useEffect","obj","description","animation_url","background_color","JSON","stringify","className","Container","Row","Button","onClick","fluid","Col","Card","style","width","Body","Title","Form","Group","controlId","onChange","e","target","value","Label","Control","placeholder","Text","as","rows","variant","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+sKAaMA,EAASC,iBAAO,sCAEhBC,EAAe,CACnBC,IAAKC,EACLC,QAAS,8CAGLC,EAAW,IAAIC,IAAOC,UAAUC,aAAaC,OAAOC,UACpDC,EAAW,IAAIL,IAAOM,SAC1BX,EAAaG,QACbH,EAAaC,IACbG,GA0KaQ,MAvKf,WACER,EAASS,GAAG,WAAW,SAACC,EAAYC,GAC9BA,GACFP,OAAOQ,SAASC,YAGpB,MAA4CC,mBAAS,MAArD,mBAAOC,EAAP,KAAuBC,EAAvB,KAEA,EAAsBF,mBAAS,IAA/B,mBAAOG,EAAP,KAAYC,EAAZ,KACA,EAAwBJ,mBAAS,IAAjC,mBAAOK,EAAP,KAAaC,EAAb,KAEMC,EAAmB,uCAAG,sBAAAC,EAAA,+EAElBlB,OAAOC,SAASkB,QAAQ,CAC5BC,OAAQ,6BACRC,OAAQ,CAAC,CAAEC,QAAS,cAJE,0DAOL,OAAf,KAAMC,KAPc,2CASdvB,OAAOC,SAASkB,QAAQ,CAC5BC,OAAQ,0BACRC,OAAQ,CACN,CACEC,QAAS,UACTE,UAAW,SACXC,QAAS,CAAC,qCACVC,eAAgB,CACdC,KAAM,QACNC,OAAQ,QACRC,SAAU,IAEZC,kBAAmB,CAAC,8CArBN,0DA0BpBC,MAAM,KAAMC,SA1BQ,gEAAH,qDAgCnBC,EAAoB,uCAAG,4BAAAf,EAAA,sEACrBD,IADqB,uBAErBA,IAFqB,gCAIFjB,OAAOC,SAASkB,QAAQ,CAC7CC,OAAQ,wBALe,OAInBc,EAJmB,OAQzBtB,EAAkBsB,EAAS,IARF,4GAAH,qDAYpBC,EAAI,uCAAG,WAAOpB,GAAP,iBAAAG,EAAA,sEACS5B,EAAO8C,IAAIrB,GADpB,cACLsB,EADK,OAGLC,EAAiBpC,EAASqC,QAAQ3C,EAAS4C,aAHtC,SAKLF,EAAeG,YAAY9B,EAAgB0B,EAAMK,MAL5C,2CAAH,sDA2BV,OAnBAC,qBAAU,WACR,IAAIC,EAAM,CACRjB,KAAK,WACLkB,YAAY,kBACZC,cAAc,wBAAD,OAA0BjC,GACvCkC,iBAAiB,UAGnB/B,EAAQgC,KAAKC,UAAUL,MACtB,CAAC/B,IAWF,sBAAKqC,UAAU,MAAf,UACE,wBAAQA,UAAU,aAAlB,SACE,cAACC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,UACE,sDAEGlD,EAASP,iBAKlB,qBAAKuD,UAAU,OAAf,SACGvC,EACC,qBAAKuC,UAAU,YAAf,SACE,yBArBN,cAACG,EAAA,EAAD,CAAQC,QAASrB,EAAsBiB,UAAU,wBAAjD,8BA2BA,gGACA,0GAIA,yDACA,2EACA,yCACA,kFACA,qBAAKA,UAAU,SACf,cAACC,EAAA,EAAD,CAAWI,OAAK,EAACL,UAAU,YAA3B,SACE,cAACE,EAAA,EAAD,CAAKF,UAAU,4BAAf,SACE,cAACM,EAAA,EAAD,CAAKN,UAAU,cAAf,SACE,cAACO,EAAA,EAAD,CAAMC,MAAO,CAAEC,MAAO,SAAWT,UAAU,WAA3C,SACE,eAACO,EAAA,EAAKG,KAAN,WACE,cAACH,EAAA,EAAKI,MAAN,uBAEClD,EACC,8BACE,eAACmD,EAAA,EAAD,WACE,eAACA,EAAA,EAAKC,MAAN,CACEb,UAAU,OACVc,UAAU,UACVC,SAAU,SAACC,GAAD,OAAOpD,EAAOoD,EAAEC,OAAOC,QAHnC,UAKE,cAACN,EAAA,EAAKO,MAAN,kCACA,cAACP,EAAA,EAAKQ,QAAN,CAAcC,YAAY,WAE5B,cAACT,EAAA,EAAKU,KAAN,CAAWtB,UAAU,aAArB,6FAKA,cAACY,EAAA,EAAKC,MAAN,CAAYb,UAAU,OAAOc,UAAU,WAAvC,SACE,cAACF,EAAA,EAAKQ,QAAN,CACEG,GAAG,WACHC,KAAM,GACNN,MAAOrD,EACPkD,SAAU,SAACC,GAAD,OAAOlD,EAAQkD,EAAEC,OAAOC,YAItC,cAACf,EAAA,EAAD,CACEsB,QAAQ,UACRrB,QAAO,sBAAE,sBAAApC,EAAA,sEACDiB,EAAKpB,GADJ,2CAFX,uBAWJ,kB,OChLlB6D,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.7fa7db91.chunk.js","sourcesContent":["import Button from \"react-bootstrap/Button\";\nimport Card from \"react-bootstrap/Card\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Form from \"react-bootstrap/Form\";\nimport { useEffect, useState } from \"react\";\nimport metadataFile from \"./contracts/TestNFT.json\";\nimport { ethers } from \"ethers\";\nimport { create } from \"ipfs-http-client\";\n\nimport \"./App.css\";\n\nconst client = create(\"https://ipfs.infura.io:5001/api/v0\");\n\nconst contractInfo = {\n  abi: metadataFile,\n  address: \"0xEE664753BEFD23Ab6319Ca56C1180f3F29a6877a\",\n};\n\nconst provider = new ethers.providers.Web3Provider(window.ethereum);\nconst contract = new ethers.Contract(\n  contractInfo.address,\n  contractInfo.abi,\n  provider\n);\n\nfunction App() {\n  provider.on(\"network\", (newNetwork, oldNetwork) => {\n    if (oldNetwork) {\n      window.location.reload();\n    }\n  });\n  const [currentAccount, setCurrentAccount] = useState(null);\n\n  const [cid, setCid] = useState(\"\");\n  const [json, setJson] = useState(\"\");\n\n  const switchNetworkMumbai = async () => {\n    try {\n      await window.ethereum.request({\n        method: \"wallet_switchEthereumChain\",\n        params: [{ chainId: \"0x13881\" }],\n      });\n    } catch (error) {\n      if (error.code === 4902) {\n        try {\n          await window.ethereum.request({\n            method: \"wallet_addEthereumChain\",\n            params: [\n              {\n                chainId: \"0x13881\",\n                chainName: \"Mumbai\",\n                rpcUrls: [\"https://rpc-mumbai.maticvigil.com\"],\n                nativeCurrency: {\n                  name: \"Matic\",\n                  symbol: \"Matic\",\n                  decimals: 18,\n                },\n                blockExplorerUrls: [\"https://explorer-mumbai.maticvigil.com\"],\n              },\n            ],\n          });\n        } catch (error) {\n          alert(error.message);\n        }\n      }\n    }\n  };\n\n  const connectWalletHandler = async () => {\n    await switchNetworkMumbai();\n    await switchNetworkMumbai();\n    try {\n      const accounts = await window.ethereum.request({\n        method: \"eth_requestAccounts\",\n      });\n\n      setCurrentAccount(accounts[0]);\n    } catch (error) {}\n  };\n\n  const mint = async (json) => {\n    const added = await client.add(json);\n\n    const signerContract = contract.connect(provider.getSigner());\n\n    await signerContract.mint_single(currentAccount, added.path);\n  };\n\n  useEffect(() => {\n    let obj = {\n      name: `NFT name`,\n      description: `NFT Description`,\n      animation_url: `https://ipfs.io/ipfs/${cid}`,\n      background_color: `000000`,\n    };\n\n    setJson(JSON.stringify(obj));\n  }, [cid]);\n\n  const connectWalletButton = () => {\n    return (\n      <Button onClick={connectWalletHandler} className=\"connect-wallet-button\">\n        Connect Wallet\n      </Button>\n    );\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Container>\n          <Row>\n            <h4>\n              Contract address&nbsp;\n              {contract.address}\n            </h4>\n          </Row>\n        </Container>\n      </header>\n      <div className=\"mb-3\">\n        {currentAccount ? (\n          <div className=\"mt-3 mb-3\">\n            <h4></h4>\n          </div>\n        ) : (\n          connectWalletButton()\n        )}\n      </div>\n      <p>1. Get some test MATIC from https://faucet.polygon.technology/ </p>\n      <p>\n        2. Upload your glb file to IPFS using\n        https://app.pinata.cloud/pinmanager\n      </p>\n      <p>3. Copy the CID in here </p>\n      <p>4. Change the JSON properties as you wish </p>\n      <p>5. Mint </p>\n      <p>6. Check your NFT on https://testnets.opensea.io/</p>\n      <div className=\"mt-5\" />\n      <Container fluid className=\"Container\">\n        <Row className=\"justify-content-md-center\">\n          <Col className=\"col-md-auto\">\n            <Card style={{ width: \"50rem\" }} className=\"Card m-3\">\n              <Card.Body>\n                <Card.Title>Your NFT</Card.Title>\n\n                {currentAccount ? (\n                  <div>\n                    <Form>\n                      <Form.Group\n                        className=\"mb-3\"\n                        controlId=\"formCID\"\n                        onChange={(e) => setCid(e.target.value)}\n                      >\n                        <Form.Label>Enter your CID here</Form.Label>\n                        <Form.Control placeholder=\"CID\" />\n                      </Form.Group>\n                      <Form.Text className=\"text-muted\">\n                        The following JSON will be uploaded to IPFS and minted\n                        as NFT. You can edit it!\n                      </Form.Text>\n\n                      <Form.Group className=\"mb-3\" controlId=\"formJSON\">\n                        <Form.Control\n                          as=\"textarea\"\n                          rows={10}\n                          value={json}\n                          onChange={(e) => setJson(e.target.value)}\n                        />\n                      </Form.Group>\n\n                      <Button\n                        variant=\"primary\"\n                        onClick={async () => {\n                          await mint(json);\n                        }}\n                      >\n                        Mint\n                      </Button>\n                    </Form>\n                  </div>\n                ) : (\n                  \"\"\n                )}\n              </Card.Body>\n            </Card>\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\n// Importing the Bootstrap CSS\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}